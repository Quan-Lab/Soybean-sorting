%%Function: network model for training
net = MobileNet-improved;
imds = imageDatastore('Dataset', ...
    'IncludeSubfolders',true, ...
    'LabelSource','foldernames');
[imdsTrain,imdsValidation] = splitEachLabel(imds,0.7,'randomized'); %The training set accounts for 70% of the data set
analyzeNetwork(net)
net.Layers(1)
inputSize = net.Layers(1).InputSize;
numClasses = numel(categories(imdsTrain.Labels));
lgraph = layerGraph(net);
% Transfer learning
[learnableLayer,classLayer] = findLayersToReplace(lgraph);
if isa(learnableLayer,'nnet.cnn.layer.FullyConnectedLayer')
    newLearnableLayer = fullyConnectedLayer(numClasses, ...
        'Name','new_fc', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
elseif isa(learnableLayer,'nnet.cnn.layer.Convolution2DLayer')
    newLearnableLayer = convolution2dLayer(1,numClasses, ...
        'Name','new_conv', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
end
lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);newClassLayer = classificationLayer('Name','new_classoutput');
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);
pixelRange = [-30 30];
scaleRange = [0.9 1.1];
imageAugmenter = imageDataAugmenter(... 
    'RandXReflection',true,... 
    'RandXTranslation',pixelRange,... 
    'RandYTranslation',pixelRange,... 
    'RandXScale',scaleRange,... 
    'RandYScale',scaleRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain,... 
    'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation);
% %Training hyperparameter settings
options = trainingOptions('sgdm', ...
    'MiniBatchSize',10, ...
    'MaxEpochs',6, ...
    'InitialLearnRate',3e-4, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',3, ...
    'Verbose',false, ...
    'Plots','training-progress');
netTransfer = trainNetwork(augimdsTrain,lgraph,options);
save mobileNet-improved_1.mat netTransfer %Weight file saving

% % % Classification result test
tic
% 使用经过微调的网络对验证图像进行分类，并计算分类准确度。
[YPred,probs] = classify(netTransfer,augimdsValidation);
accuracy = mean(YPred == imdsValidation.Labels)
% 显示示例验证图像及预测的标签，以及具有这些标签的图像的预测概率。
idx = randperm(numel(imdsValidation.Files),30);
figure
for i = 1:30
     subplot(5,6,i)
    I = readimage(imdsValidation,idx(i));
     imshow(I)
     label = YPred(idx(i));
      title('Pr：' + string(label) + ", " + num2str(100*max(probs(idx(i),:)),3) + "%");
end
toc
